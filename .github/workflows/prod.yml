name: CI/CD Development Env

on:
  push:
    branches: ["production"]
  pull_request:
    branches: ["production"]

env:
  REGISTRY: ghcr.io
  REGISTRY_USERNAME: ${{ github.actor }}
  REGISTRY_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  IMAGE_NAME: ${{ github.repository }}
  WORKER_IMAGE_NAME: ${{ github.repository }}-worker
  DOCKER_CONTAINER_NAME: socious-id
  DOCKER_CONTAINER_NETWORK: sociousid_default
  CONFIG_DIR_NAME: socious-id

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U test"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Go environment
        uses: actions/setup-go@v5.0.2
        with:
          go-version: '1.22.5'
          cache-dependency-path: 'go.sum'

      - id: go-cache-paths
        name: Get Go Cache Paths
        run: |
          echo "go-build=$(go env GOCACHE)" >> $GITHUB_OUTPUT
          echo "go-mod=$(go env GOMODCACHE)" >> $GITHUB_OUTPUT

      # Cache go build cache, used to speedup go test
      - name: Go Build Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      # Cache go mod cache, used to speedup builds
      - name: Go Mod Cache
        uses: actions/cache@v4
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Generate test.config.yml
        run: |
          tee test.config.yml > /dev/null <<EOF
          env: test
          port: 5064
          host: "http://localhost:5064"
          secret: this-is-secret
          debug: true
          statics: src/statics
          templates: src/templates
          database: 
            url: postgresql://test:test@localhost:5432/testdb?sslmode=disable
            sqldir: src/sql
            migrations: src/sql/migrations
          cors:
            origins:
              - '*'
          EOF
          cat test.config.yml

      - name: Downloading dependencies
        run: |
          go mod download 

      - name: Running tests
        run: |
          go test -v ./tests

  build:
    needs: [test]
    name: Build
    if: github.event_name != 'pull_request'
    runs-on: ["socious-runner"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copying environment variables
        run: |
          cp /etc/${{ env.CONFIG_DIR_NAME }}/config.yml .
          cp /etc/${{ env.CONFIG_DIR_NAME }}/gcs-service-account.json .

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v6.7.0
        with:
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          target: 'runner'
          push: true

  build-worker:
    needs: [test]
    name: Build Worker
    if: github.event_name != 'pull_request'
    runs-on: ["socious-runner"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Copying environment variables
        run: |
          cp /etc/${{ env.CONFIG_DIR_NAME }}/config.yml .
          cp /etc/${{ env.CONFIG_DIR_NAME }}/gcs-service-account.json .

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract Worker Docker metadata
        id: meta-worker
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.WORKER_IMAGE_NAME }}

      - name: Build and push Worker Docker image
        uses: docker/build-push-action@v6.7.0
        with:
          context: .
          tags: ${{ steps.meta-worker.outputs.tags }}
          labels: ${{ steps.meta-worker.outputs.labels }}
          target: 'worker-runner'
          push: true
          
  deploy:
    needs: [build]
    name: Deploy
    if: github.event_name != 'pull_request'
    runs-on: ["socious-runner"]
    steps:
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Pull Docker image
        run: |
          docker pull ${{ steps.meta.outputs.tags }}

      - name: Apply Migrations
        run: |
          docker run --rm --network ${{ env.DOCKER_CONTAINER_NETWORK }} ${{ steps.meta.outputs.tags }} go run /app/cmd/migrate/main.go up
      
      - name: Stop & Remove Previous Container
        run: |
          docker ps -qa --filter "name=${{ env.DOCKER_CONTAINER_NAME }}" | grep -q . && docker stop ${{ env.DOCKER_CONTAINER_NAME }} && docker rm -fv ${{ env.DOCKER_CONTAINER_NAME }}

      - name: Docker run
        run: |
          docker run -d --restart always -p 5064:5064 -h ${{ env.DOCKER_CONTAINER_NAME }} --network ${{ env.DOCKER_CONTAINER_NETWORK }} --name ${{ env.DOCKER_CONTAINER_NAME }} ${{ steps.meta.outputs.tags }}

  deploy-worker:
    needs: [build-worker]
    name: Deploy Worker
    if: github.event_name != 'pull_request'
    runs-on: ["socious-runner"]
    steps:
      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.2.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}

      - name: Extract Worker Docker metadata
        id: meta
        uses: docker/metadata-action@v5.5.1
        with:
          images: ${{ env.REGISTRY }}/${{ env.WORKER_IMAGE_NAME }}

      - name: Pull Docker image
        run: |
          docker pull ${{ steps.meta.outputs.tags }}

      - name: Stop & Remove Previous Container
        run: |
          docker ps -qa --filter "name=${{ env.DOCKER_CONTAINER_NAME }}-worker" | grep -q . && docker stop ${{ env.DOCKER_CONTAINER_NAME }}-worker && docker rm -fv ${{ env.DOCKER_CONTAINER_NAME }}-worker

      - name: Docker run worker
        run: |
          docker run -d --restart always -h ${{ env.DOCKER_CONTAINER_NAME }}-worker --network ${{ env.DOCKER_CONTAINER_NETWORK }} --name ${{ env.DOCKER_CONTAINER_NAME }}-worker ${{ steps.meta.outputs.tags }}